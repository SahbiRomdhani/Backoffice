/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, EventEmitter, Inject } from '@angular/core';
import { animate, style, transition, trigger } from '@angular/animations';
import { InstanceConfigHolderService } from '../../service/instance-config-holder.service';
/** @type {?} */
var inactiveStyle = style({
    opacity: 0,
    transform: 'translateY(-40px)'
});
/** @type {?} */
var timing = '.3s ease';
var NgBusyComponent = /** @class */ (function () {
    function NgBusyComponent(instanceConfigHolder, busyEmitter, cdr) {
        var _this = this;
        this.instanceConfigHolder = instanceConfigHolder;
        this.busyEmitter = busyEmitter;
        this.cdr = cdr;
        this.disableAnimation = false;
        this.showBackdrop = true;
        this.isActive = false;
        this.busyMonitor = this.busyEmitter.subscribe(function (isActive) {
            /** @type {?} */
            var config = _this.instanceConfigHolder.config;
            _this.isActive = isActive;
            _this.wrapperClass = config.wrapperClass;
            _this.showBackdrop = config.backdrop;
            _this.disableAnimation = config.disableAnimation;
            if (_this.cdr) {
                _this.cdr.markForCheck();
            }
        });
    }
    /**
     * @return {?}
     */
    NgBusyComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.busyMonitor) {
            this.busyMonitor.unsubscribe();
        }
    };
    NgBusyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ng-busy',
                    template: "<div [class]=\"wrapperClass\" @flyInOut [@.disabled]=\"disableAnimation\" *ngIf=\"isActive\">\n  <ng-content></ng-content>\n</div>\n<div class=\"ng-busy-backdrop\" @flyInOut [@.disabled]=\"disableAnimation\" *ngIf=\"showBackdrop && isActive\">\n</div>\n",
                    styles: [""],
                    animations: [
                        trigger('flyInOut', [
                            transition('void => *', [
                                inactiveStyle,
                                animate(timing)
                            ]),
                            transition('* => void', [
                                animate(timing, inactiveStyle)
                            ])
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    NgBusyComponent.ctorParameters = function () { return [
        { type: InstanceConfigHolderService, decorators: [{ type: Inject, args: ['instanceConfigHolder',] }] },
        { type: EventEmitter, decorators: [{ type: Inject, args: ['busyEmitter',] }] },
        { type: ChangeDetectorRef }
    ]; };
    return NgBusyComponent;
}());
export { NgBusyComponent };
if (false) {
    /** @type {?} */
    NgBusyComponent.prototype.wrapperClass;
    /** @type {?} */
    NgBusyComponent.prototype.disableAnimation;
    /** @type {?} */
    NgBusyComponent.prototype.showBackdrop;
    /** @type {?} */
    NgBusyComponent.prototype.busyMonitor;
    /** @type {?} */
    NgBusyComponent.prototype.isActive;
    /** @type {?} */
    NgBusyComponent.prototype.instanceConfigHolder;
    /** @type {?} */
    NgBusyComponent.prototype.busyEmitter;
    /** @type {?} */
    NgBusyComponent.prototype.cdr;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYnVzeS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1idXN5LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudC9uZy1idXN5L25nLWJ1c3kuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBR3hFLE9BQU8sRUFBQywyQkFBMkIsRUFBQyxNQUFNLDhDQUE4QyxDQUFDOztBQUV6RixJQUFNLGFBQWEsR0FBRyxLQUFLLENBQUM7SUFDMUIsT0FBTyxFQUFFLENBQUM7SUFDVixTQUFTLEVBQUUsbUJBQW1CO0NBQy9CLENBQUMsQ0FBQzs7QUFDSCxJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUM7O0lBK0J4Qix5QkFDMEMsb0JBQWlELEVBQzFELFdBQWtDLEVBQ2hEO1FBSG5CLGlCQWVDO1FBZHlDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBNkI7UUFDMUQsZ0JBQVcsR0FBWCxXQUFXLENBQXVCO1FBQ2hELFFBQUcsR0FBSCxHQUFHO2dDQVJJLEtBQUs7NEJBQ1QsSUFBSTt3QkFFZixLQUFLO1FBT2QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFDLFFBQWlCOztZQUM5RCxJQUFNLE1BQU0sR0FBRyxLQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDO1lBQ2hELEtBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQ3pCLEtBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQztZQUN4QyxLQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7WUFDcEMsS0FBSSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztZQUNoRCxJQUFJLEtBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ1osS0FBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQzthQUN6QjtTQUNGLENBQUMsQ0FBQztLQUNKOzs7O0lBRUQscUNBQVc7OztJQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDaEM7S0FDRjs7Z0JBbERGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsUUFBUSxFQUFFLCtQQUtYO29CQUNDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztvQkFDWixVQUFVLEVBQUU7d0JBQ1YsT0FBTyxDQUFDLFVBQVUsRUFBRTs0QkFDbEIsVUFBVSxDQUFDLFdBQVcsRUFBRTtnQ0FDdEIsYUFBYTtnQ0FDYixPQUFPLENBQUMsTUFBTSxDQUFDOzZCQUNoQixDQUFDOzRCQUNGLFVBQVUsQ0FBQyxXQUFXLEVBQUU7Z0NBQ3RCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDOzZCQUMvQixDQUFDO3lCQUNILENBQUM7cUJBQ0g7aUJBQ0Y7Ozs7Z0JBNUJPLDJCQUEyQix1QkFzQzlCLE1BQU0sU0FBQyxzQkFBc0I7Z0JBMUNJLFlBQVksdUJBMkM3QyxNQUFNLFNBQUMsYUFBYTtnQkEzQ2pCLGlCQUFpQjs7MEJBQXpCOztTQWlDYSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIEluamVjdCwgT25EZXN0cm95fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7YW5pbWF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXJ9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtTdWJzY3JpcHRpb259IGZyb20gJ3J4anMvaW50ZXJuYWwvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7TmdCdXN5RGlyZWN0aXZlfSBmcm9tICcuLi8uLi9uZy1idXN5LmRpcmVjdGl2ZSc7XG5pbXBvcnQge0luc3RhbmNlQ29uZmlnSG9sZGVyU2VydmljZX0gZnJvbSAnLi4vLi4vc2VydmljZS9pbnN0YW5jZS1jb25maWctaG9sZGVyLnNlcnZpY2UnO1xuXG5jb25zdCBpbmFjdGl2ZVN0eWxlID0gc3R5bGUoe1xuICBvcGFjaXR5OiAwLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC00MHB4KSdcbn0pO1xuY29uc3QgdGltaW5nID0gJy4zcyBlYXNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbGliLW5nLWJ1c3knLFxuICB0ZW1wbGF0ZTogYDxkaXYgW2NsYXNzXT1cIndyYXBwZXJDbGFzc1wiIEBmbHlJbk91dCBbQC5kaXNhYmxlZF09XCJkaXNhYmxlQW5pbWF0aW9uXCIgKm5nSWY9XCJpc0FjdGl2ZVwiPlxuICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG48L2Rpdj5cbjxkaXYgY2xhc3M9XCJuZy1idXN5LWJhY2tkcm9wXCIgQGZseUluT3V0IFtALmRpc2FibGVkXT1cImRpc2FibGVBbmltYXRpb25cIiAqbmdJZj1cInNob3dCYWNrZHJvcCAmJiBpc0FjdGl2ZVwiPlxuPC9kaXY+XG5gLFxuICBzdHlsZXM6IFtgYF0sXG4gIGFuaW1hdGlvbnM6IFtcbiAgICB0cmlnZ2VyKCdmbHlJbk91dCcsIFtcbiAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gKicsIFtcbiAgICAgICAgaW5hY3RpdmVTdHlsZSxcbiAgICAgICAgYW5pbWF0ZSh0aW1pbmcpXG4gICAgICBdKSxcbiAgICAgIHRyYW5zaXRpb24oJyogPT4gdm9pZCcsIFtcbiAgICAgICAgYW5pbWF0ZSh0aW1pbmcsIGluYWN0aXZlU3R5bGUpXG4gICAgICBdKVxuICAgIF0pXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTmdCdXN5Q29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICBwdWJsaWMgd3JhcHBlckNsYXNzOiBzdHJpbmc7XG4gIHB1YmxpYyBkaXNhYmxlQW5pbWF0aW9uID0gZmFsc2U7XG4gIHB1YmxpYyBzaG93QmFja2Ryb3AgPSB0cnVlO1xuICBwcml2YXRlIHJlYWRvbmx5IGJ1c3lNb25pdG9yOiBTdWJzY3JpcHRpb247XG4gIGlzQWN0aXZlID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdCgnaW5zdGFuY2VDb25maWdIb2xkZXInKSBwcml2YXRlIGluc3RhbmNlQ29uZmlnSG9sZGVyOiBJbnN0YW5jZUNvbmZpZ0hvbGRlclNlcnZpY2UsXG4gICAgQEluamVjdCgnYnVzeUVtaXR0ZXInKSBwcml2YXRlIGJ1c3lFbWl0dGVyOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4sXG4gICAgcHJpdmF0ZSByZWFkb25seSBjZHI6IENoYW5nZURldGVjdG9yUmVmXG4gICkge1xuICAgIHRoaXMuYnVzeU1vbml0b3IgPSB0aGlzLmJ1c3lFbWl0dGVyLnN1YnNjcmliZSgoaXNBY3RpdmU6IGJvb2xlYW4pID0+IHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuaW5zdGFuY2VDb25maWdIb2xkZXIuY29uZmlnO1xuICAgICAgdGhpcy5pc0FjdGl2ZSA9IGlzQWN0aXZlO1xuICAgICAgdGhpcy53cmFwcGVyQ2xhc3MgPSBjb25maWcud3JhcHBlckNsYXNzO1xuICAgICAgdGhpcy5zaG93QmFja2Ryb3AgPSBjb25maWcuYmFja2Ryb3A7XG4gICAgICB0aGlzLmRpc2FibGVBbmltYXRpb24gPSBjb25maWcuZGlzYWJsZUFuaW1hdGlvbjtcbiAgICAgIGlmICh0aGlzLmNkcikge1xuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmJ1c3lNb25pdG9yKSB7XG4gICAgICB0aGlzLmJ1c3lNb25pdG9yLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==
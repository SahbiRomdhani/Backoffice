/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { EventEmitter, Injectable } from '@angular/core';
import { from, timer } from 'rxjs';
import { isPromise } from '../util/isPromise';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function TrackerOptions() { }
/** @type {?} */
TrackerOptions.prototype.minDuration;
/** @type {?} */
TrackerOptions.prototype.delay;
/** @type {?} */
TrackerOptions.prototype.busyList;
export class BusyTrackerService {
    constructor() {
        this.isDelayProcessing = false;
        this.isDurationProcessing = false;
        this.isBusiesProcessing = false;
        this.busyQueue = [];
        this.__isActive = false;
        this.onStartBusy = new EventEmitter();
        this.onStopBusy = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get isActive() {
        return this.__isActive;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set isActive(val) {
        if (this.__isActive === false && val === true && this.onStartBusy) {
            this.onStartBusy.emit();
        }
        if (this.__isActive === true && val === false && this.onStopBusy) {
            this.isBusiesProcessing = false;
            this.onStopBusy.emit();
        }
        this.__isActive = val;
    }
    /**
     * @return {?}
     */
    get busyList() {
        return this.busyQueue;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    load(options) {
        this.loadBusyQueue(options.busyList);
        this.startLoading(options);
    }
    /**
     * @return {?}
     */
    updateActiveStatus() {
        this.isActive = this.isBusiesProcessing &&
            !this.isDelayProcessing &&
            (this.isDurationProcessing || this.busyQueue.length > 0);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    startLoading(options) {
        if (!this.isBusiesProcessing && this.busyList.length > 0) {
            this.isBusiesProcessing = true;
            this.isDelayProcessing = true;
            this.updateActiveStatus();
            timer(options.delay).subscribe(() => {
                this.isDelayProcessing = false;
                this.isDurationProcessing = true;
                this.updateActiveStatus();
                timer(options.minDuration).subscribe(() => {
                    this.isDurationProcessing = false;
                    this.updateActiveStatus();
                });
            });
        }
    }
    /**
     * @param {?} busies
     * @return {?}
     */
    loadBusyQueue(busies) {
        busies.filter((busy) => {
            return busy && !busy.hasOwnProperty('__loaded_mark_by_ng_busy');
        }).forEach((busy) => {
            Object.defineProperty(busy, '__loaded_mark_by_ng_busy', {
                value: true, configurable: false, enumerable: false, writable: false
            });
            /** @type {?} */
            let cur_busy;
            if (isPromise(busy)) {
                cur_busy = from(busy).subscribe();
            }
            else {
                cur_busy = busy;
            }
            this.appendToQueue(cur_busy);
        });
    }
    /**
     * @param {?} busy
     * @return {?}
     */
    appendToQueue(busy) {
        this.busyQueue.push(busy);
        busy.add(() => {
            this.busyQueue = this.busyQueue.filter((cur) => !cur.closed);
            this.updateActiveStatus();
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
BusyTrackerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
BusyTrackerService.ctorParameters = () => [];
/** @nocollapse */ BusyTrackerService.ngInjectableDef = i0.defineInjectable({ factory: function BusyTrackerService_Factory() { return new BusyTrackerService(); }, token: BusyTrackerService, providedIn: "root" });
if (false) {
    /** @type {?} */
    BusyTrackerService.prototype.isDelayProcessing;
    /** @type {?} */
    BusyTrackerService.prototype.isDurationProcessing;
    /** @type {?} */
    BusyTrackerService.prototype.isBusiesProcessing;
    /** @type {?} */
    BusyTrackerService.prototype.busyQueue;
    /** @type {?} */
    BusyTrackerService.prototype.__isActive;
    /** @type {?} */
    BusyTrackerService.prototype.onStartBusy;
    /** @type {?} */
    BusyTrackerService.prototype.onStopBusy;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVzeS10cmFja2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1idXN5LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvYnVzeS10cmFja2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxZQUFZLEVBQUUsVUFBVSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ2xFLE9BQU8sRUFBZSxJQUFJLEVBQUUsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQy9DLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7Ozs7Ozs7O0FBVzVDLE1BQU07SUE2Qko7aUNBM0I0QixLQUFLO29DQUNGLEtBQUs7a0NBQ1AsS0FBSzt5QkFDTyxFQUFFOzBCQUN0QixLQUFLOzJCQUVPLElBQUksWUFBWSxFQUFFOzBCQUNuQixJQUFJLFlBQVksRUFBRTtLQW9CbEM7Ozs7SUFsQmhCLElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztLQUN4Qjs7Ozs7SUFFRCxJQUFJLFFBQVEsQ0FBQyxHQUFZO1FBQ3ZCLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxLQUFLLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2pFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDekI7UUFDRCxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNoRSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDeEI7UUFDRCxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztLQUN2Qjs7OztJQUNELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztLQUN2Qjs7Ozs7SUFJRCxJQUFJLENBQUMsT0FBdUI7UUFDMUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUM1Qjs7OztJQUVPLGtCQUFrQjtRQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxrQkFBa0I7WUFDckMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCO1lBQ3ZCLENBQUMsSUFBSSxDQUFDLG9CQUFvQixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDOzs7Ozs7SUFHckQsWUFBWSxDQUFDLE9BQXVCO1FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3hELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7WUFDL0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztZQUM5QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztZQUMxQixLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7Z0JBQy9CLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO2dCQUMxQixLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7b0JBQ3hDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7b0JBQ2xDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO2lCQUMzQixDQUFDLENBQUM7YUFDSixDQUFDLENBQUM7U0FDSjs7Ozs7O0lBR0ssYUFBYSxDQUFDLE1BQTBDO1FBQzlELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNyQixPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsMEJBQTBCLENBQUMsQ0FBQztTQUNqRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBaUMsRUFBRSxFQUFFO1lBQy9DLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLDBCQUEwQixFQUFFO2dCQUN0RCxLQUFLLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSzthQUNyRSxDQUFDLENBQUM7O1lBQ0gsSUFBSSxRQUFRLENBQUM7WUFDYixJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDbkIsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUNuQztpQkFBTTtnQkFDTCxRQUFRLEdBQUcsSUFBSSxDQUFDO2FBQ2pCO1lBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM5QixDQUFDLENBQUM7Ozs7OztJQUdHLGFBQWEsQ0FBQyxJQUFrQjtRQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMzRSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUMzQixDQUFDLENBQUM7Ozs7O0lBR0wsV0FBVztLQUNWOzs7WUF4RkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudEVtaXR0ZXIsIEluamVjdGFibGUsIE9uRGVzdHJveX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1N1YnNjcmlwdGlvbiwgZnJvbSwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtpc1Byb21pc2V9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcblxuZXhwb3J0IGludGVyZmFjZSBUcmFja2VyT3B0aW9ucyB7XG4gIG1pbkR1cmF0aW9uOiBudW1iZXI7XG4gIGRlbGF5OiBudW1iZXI7XG4gIGJ1c3lMaXN0OiBBcnJheTxQcm9taXNlPGFueT4gfCBTdWJzY3JpcHRpb24+O1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBCdXN5VHJhY2tlclNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIHByaXZhdGUgaXNEZWxheVByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBpc0R1cmF0aW9uUHJvY2Vzc2luZyA9IGZhbHNlO1xuICBwcml2YXRlIGlzQnVzaWVzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICBwcml2YXRlIGJ1c3lRdWV1ZTogQXJyYXk8U3Vic2NyaXB0aW9uPiA9IFtdO1xuICBwcml2YXRlIF9faXNBY3RpdmUgPSBmYWxzZTtcblxuICBvblN0YXJ0QnVzeTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIG9uU3RvcEJ1c3k6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGdldCBpc0FjdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fX2lzQWN0aXZlO1xuICB9XG5cbiAgc2V0IGlzQWN0aXZlKHZhbDogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLl9faXNBY3RpdmUgPT09IGZhbHNlICYmIHZhbCA9PT0gdHJ1ZSAmJiB0aGlzLm9uU3RhcnRCdXN5KSB7XG4gICAgICB0aGlzLm9uU3RhcnRCdXN5LmVtaXQoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX19pc0FjdGl2ZSA9PT0gdHJ1ZSAmJiB2YWwgPT09IGZhbHNlICYmIHRoaXMub25TdG9wQnVzeSkge1xuICAgICAgdGhpcy5pc0J1c2llc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMub25TdG9wQnVzeS5lbWl0KCk7XG4gICAgfVxuICAgIHRoaXMuX19pc0FjdGl2ZSA9IHZhbDtcbiAgfVxuICBnZXQgYnVzeUxpc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVzeVF1ZXVlO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIGxvYWQob3B0aW9uczogVHJhY2tlck9wdGlvbnMpIHtcbiAgICB0aGlzLmxvYWRCdXN5UXVldWUob3B0aW9ucy5idXN5TGlzdCk7XG4gICAgdGhpcy5zdGFydExvYWRpbmcob3B0aW9ucyk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUFjdGl2ZVN0YXR1cygpIHtcbiAgICB0aGlzLmlzQWN0aXZlID0gdGhpcy5pc0J1c2llc1Byb2Nlc3NpbmcgJiZcbiAgICAgICF0aGlzLmlzRGVsYXlQcm9jZXNzaW5nICYmXG4gICAgICAodGhpcy5pc0R1cmF0aW9uUHJvY2Vzc2luZyB8fCB0aGlzLmJ1c3lRdWV1ZS5sZW5ndGggPiAwKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhcnRMb2FkaW5nKG9wdGlvbnM6IFRyYWNrZXJPcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmlzQnVzaWVzUHJvY2Vzc2luZyAmJiB0aGlzLmJ1c3lMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuaXNCdXNpZXNQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuaXNEZWxheVByb2Nlc3NpbmcgPSB0cnVlO1xuICAgICAgdGhpcy51cGRhdGVBY3RpdmVTdGF0dXMoKTtcbiAgICAgIHRpbWVyKG9wdGlvbnMuZGVsYXkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuaXNEZWxheVByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0R1cmF0aW9uUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMudXBkYXRlQWN0aXZlU3RhdHVzKCk7XG4gICAgICAgIHRpbWVyKG9wdGlvbnMubWluRHVyYXRpb24pLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5pc0R1cmF0aW9uUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMudXBkYXRlQWN0aXZlU3RhdHVzKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBsb2FkQnVzeVF1ZXVlKGJ1c2llczogQXJyYXk8UHJvbWlzZTxhbnk+IHwgU3Vic2NyaXB0aW9uPikge1xuICAgIGJ1c2llcy5maWx0ZXIoKGJ1c3kpID0+IHtcbiAgICAgIHJldHVybiBidXN5ICYmICFidXN5Lmhhc093blByb3BlcnR5KCdfX2xvYWRlZF9tYXJrX2J5X25nX2J1c3knKTtcbiAgICB9KS5mb3JFYWNoKChidXN5OiBQcm9taXNlPGFueT4gfCBTdWJzY3JpcHRpb24pID0+IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShidXN5LCAnX19sb2FkZWRfbWFya19ieV9uZ19idXN5Jywge1xuICAgICAgICB2YWx1ZTogdHJ1ZSwgY29uZmlndXJhYmxlOiBmYWxzZSwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBsZXQgY3VyX2J1c3k7XG4gICAgICBpZiAoaXNQcm9taXNlKGJ1c3kpKSB7XG4gICAgICAgIGN1cl9idXN5ID0gZnJvbShidXN5KS5zdWJzY3JpYmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cl9idXN5ID0gYnVzeTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYXBwZW5kVG9RdWV1ZShjdXJfYnVzeSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGFwcGVuZFRvUXVldWUoYnVzeTogU3Vic2NyaXB0aW9uKSB7XG4gICAgdGhpcy5idXN5UXVldWUucHVzaChidXN5KTtcbiAgICBidXN5LmFkZCgoKSA9PiB7XG4gICAgICB0aGlzLmJ1c3lRdWV1ZSA9IHRoaXMuYnVzeVF1ZXVlLmZpbHRlcigoY3VyOiBTdWJzY3JpcHRpb24pID0+ICFjdXIuY2xvc2VkKTtcbiAgICAgIHRoaXMudXBkYXRlQWN0aXZlU3RhdHVzKCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgfVxufVxuIl19
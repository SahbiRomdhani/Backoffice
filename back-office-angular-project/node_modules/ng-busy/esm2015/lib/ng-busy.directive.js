/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ApplicationRef, ComponentFactoryResolver, Directive, ElementRef, EventEmitter, Injector, Input, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
import { BusyTrackerService } from './service/busy-tracker.service';
import { BusyConfigHolderService } from './service/busy-config-holder.service';
import { Subscription } from 'rxjs';
import { NgBusyComponent } from './component/ng-busy/ng-busy.component';
import { InstanceConfigHolderService } from './service/instance-config-holder.service';
import { isPromise } from './util/isPromise';
export class NgBusyDirective {
    /**
     * @param {?} configHolder
     * @param {?} instanceConfigHolder
     * @param {?} resolver
     * @param {?} tracker
     * @param {?} appRef
     * @param {?} vcr
     * @param {?} element
     * @param {?} renderer
     * @param {?} injector
     */
    constructor(configHolder, instanceConfigHolder, resolver, tracker, appRef, vcr, element, renderer, injector) {
        this.configHolder = configHolder;
        this.instanceConfigHolder = instanceConfigHolder;
        this.resolver = resolver;
        this.tracker = tracker;
        this.appRef = appRef;
        this.vcr = vcr;
        this.element = element;
        this.renderer = renderer;
        this.injector = injector;
        this.busyStart = new EventEmitter();
        this.busyStop = new EventEmitter();
        this.isLoading = false;
        this.busyEmitter = new EventEmitter();
        this.onStartSubscription = tracker.onStartBusy.subscribe(() => {
            setTimeout(() => {
                this.recreateBusyIfNecessary();
                this.isLoading = true;
                this.busyEmitter.emit(this.isLoading);
                this.busyStart.emit();
            }, 0);
        });
        this.onStopSubscription = tracker.onStopBusy.subscribe(() => {
            this.isLoading = false;
            this.busyEmitter.emit(this.isLoading);
            this.busyStop.emit();
        });
    }
    /**
     * @param {?} op
     * @return {?}
     */
    set options(op) {
        this._option = op;
    }
    /**
     * @return {?}
     */
    get options() {
        return this._option;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.optionsNorm = this.normalizeOptions(this.options);
        this.instanceConfigHolder.config = this.optionsNorm;
        this.tracker.load({
            busyList: this.optionsNorm.busy,
            delay: this.optionsNorm.delay,
            minDuration: this.optionsNorm.minDuration
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyComponents();
        this.onStartSubscription.unsubscribe();
        this.onStopSubscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    recreateBusyIfNecessary() {
        if (!this.busyRef
            || this.template !== this.optionsNorm.template
            || this.templateNgStyle !== this.optionsNorm.templateNgStyle) {
            this.destroyComponents();
            this.template = this.optionsNorm.template;
            this.templateNgStyle = this.optionsNorm.templateNgStyle;
            this.createBusy();
            this.busyEmitter.emit(this.isLoading);
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    normalizeOptions(options) {
        if (!options) {
            options = { busy: [] };
        }
        else if (Array.isArray(options)
            || isPromise(options)
            || options instanceof Subscription) {
            options = { busy: options };
        }
        options = Object.assign({}, this.configHolder.config, options);
        if (!Array.isArray(options.busy)) {
            options.busy = [options.busy];
        }
        return options;
    }
    /**
     * @return {?}
     */
    destroyComponents() {
        if (this.busyRef) {
            this.busyRef.destroy();
        }
        if (this.componentViewRef) {
            this.appRef.detachView(this.componentViewRef);
        }
    }
    /**
     * @return {?}
     */
    createBusy() {
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(NgBusyComponent);
        /** @type {?} */
        const injector = Injector.create({
            providers: [
                {
                    provide: 'instanceConfigHolder',
                    useValue: this.instanceConfigHolder
                },
                {
                    provide: 'busyEmitter',
                    useValue: this.busyEmitter
                }
            ], parent: this.injector
        });
        this.template = this.optionsNorm.template;
        this.busyRef = this.vcr.createComponent(factory, 0, injector, this.generateNgContent(injector));
    }
    /**
     * @param {?} injector
     * @return {?}
     */
    generateNgContent(injector) {
        if (typeof this.template === 'string') {
            /** @type {?} */
            const element = this.renderer.createText(this.template);
            return [[element]];
        }
        if (this.template instanceof TemplateRef) {
            /** @type {?} */
            const context = {};
            /** @type {?} */
            const viewRef = this.template.createEmbeddedView(context);
            return [viewRef.rootNodes];
        }
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(this.template);
        /** @type {?} */
        const componentRef = factory.create(injector);
        componentRef.instance.templateNgStyle = this.options.templateNgStyle;
        this.componentViewRef = componentRef.hostView;
        this.appRef.attachView(this.componentViewRef);
        return [[componentRef.location.nativeElement]];
    }
}
NgBusyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngBusy]',
                providers: [BusyTrackerService, InstanceConfigHolderService]
            },] },
];
/** @nocollapse */
NgBusyDirective.ctorParameters = () => [
    { type: BusyConfigHolderService },
    { type: InstanceConfigHolderService },
    { type: ComponentFactoryResolver },
    { type: BusyTrackerService },
    { type: ApplicationRef },
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
NgBusyDirective.propDecorators = {
    options: [{ type: Input, args: ['ngBusy',] }],
    busyStart: [{ type: Output }],
    busyStop: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NgBusyDirective.prototype.busyStart;
    /** @type {?} */
    NgBusyDirective.prototype.busyStop;
    /** @type {?} */
    NgBusyDirective.prototype.optionsNorm;
    /** @type {?} */
    NgBusyDirective.prototype.busyRef;
    /** @type {?} */
    NgBusyDirective.prototype.componentViewRef;
    /** @type {?} */
    NgBusyDirective.prototype.onStartSubscription;
    /** @type {?} */
    NgBusyDirective.prototype.onStopSubscription;
    /** @type {?} */
    NgBusyDirective.prototype.isLoading;
    /** @type {?} */
    NgBusyDirective.prototype.busyEmitter;
    /** @type {?} */
    NgBusyDirective.prototype.template;
    /** @type {?} */
    NgBusyDirective.prototype.templateNgStyle;
    /** @type {?} */
    NgBusyDirective.prototype._option;
    /** @type {?} */
    NgBusyDirective.prototype.configHolder;
    /** @type {?} */
    NgBusyDirective.prototype.instanceConfigHolder;
    /** @type {?} */
    NgBusyDirective.prototype.resolver;
    /** @type {?} */
    NgBusyDirective.prototype.tracker;
    /** @type {?} */
    NgBusyDirective.prototype.appRef;
    /** @type {?} */
    NgBusyDirective.prototype.vcr;
    /** @type {?} */
    NgBusyDirective.prototype.element;
    /** @type {?} */
    NgBusyDirective.prototype.renderer;
    /** @type {?} */
    NgBusyDirective.prototype.injector;
}

//# sourceMappingURL=data:application/json;base64,
import { Injectable, Optional, ChangeDetectorRef, Component, EventEmitter, Inject, NgModule, ApplicationRef, ComponentFactoryResolver, Directive, ElementRef, Injector, Input, Output, Renderer2, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';
import { from, timer, Subscription } from 'rxjs';
import { animate, style, transition, trigger } from '@angular/animations';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class InstanceConfigHolderService {
    constructor() { }
}
InstanceConfigHolderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
InstanceConfigHolderService.ctorParameters = () => [];
/** @nocollapse */ InstanceConfigHolderService.ngInjectableDef = defineInjectable({ factory: function InstanceConfigHolderService_Factory() { return new InstanceConfigHolderService(); }, token: InstanceConfigHolderService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class BusyConfig {
    /**
     * @param {?=} config
     */
    constructor(config = {}) {
        for (const option of Object.keys(BUSY_CONFIG_DEFAULTS)) {
            this[option] = config[option] !== undefined ? config[option] : BUSY_CONFIG_DEFAULTS[option];
        }
    }
}
class DefaultBusyComponent {
    /**
     * @param {?} instanceConfigHolder
     */
    constructor(instanceConfigHolder) {
        this.instanceConfigHolder = instanceConfigHolder;
    }
    /**
     * @return {?}
     */
    get message() {
        return this.instanceConfigHolder.config.message;
    }
}
DefaultBusyComponent.decorators = [
    { type: Component, args: [{
                selector: 'default-busy',
                template: `
      <div class="ng-busy-default-wrapper">
          <div class="ng-busy-default-sign">
              <div class="ng-busy-default-spinner">
                  <div class="bar1"></div>
                  <div class="bar2"></div>
                  <div class="bar3"></div>
                  <div class="bar4"></div>
                  <div class="bar5"></div>
                  <div class="bar6"></div>
                  <div class="bar7"></div>
                  <div class="bar8"></div>
                  <div class="bar9"></div>
                  <div class="bar10"></div>
                  <div class="bar11"></div>
                  <div class="bar12"></div>
              </div>
              <div class="ng-busy-default-text">{{message}}</div>
          </div>
      </div>
  `,
            },] },
];
/** @nocollapse */
DefaultBusyComponent.ctorParameters = () => [
    { type: InstanceConfigHolderService, decorators: [{ type: Inject, args: ['instanceConfigHolder',] }] }
];
/** @type {?} */
const BUSY_CONFIG_DEFAULTS = {
    template: DefaultBusyComponent,
    templateNgStyle: {},
    delay: 0,
    minDuration: 0,
    backdrop: true,
    message: 'Please wait...',
    wrapperClass: 'ng-busy',
    disableAnimation: false
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function isPromise(value) {
    return value && typeof (/** @type {?} */ (value)).subscribe !== 'function' && typeof (/** @type {?} */ (value)).then === 'function';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class BusyTrackerService {
    constructor() {
        this.isDelayProcessing = false;
        this.isDurationProcessing = false;
        this.isBusiesProcessing = false;
        this.busyQueue = [];
        this.__isActive = false;
        this.onStartBusy = new EventEmitter();
        this.onStopBusy = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get isActive() {
        return this.__isActive;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set isActive(val) {
        if (this.__isActive === false && val === true && this.onStartBusy) {
            this.onStartBusy.emit();
        }
        if (this.__isActive === true && val === false && this.onStopBusy) {
            this.isBusiesProcessing = false;
            this.onStopBusy.emit();
        }
        this.__isActive = val;
    }
    /**
     * @return {?}
     */
    get busyList() {
        return this.busyQueue;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    load(options) {
        this.loadBusyQueue(options.busyList);
        this.startLoading(options);
    }
    /**
     * @return {?}
     */
    updateActiveStatus() {
        this.isActive = this.isBusiesProcessing &&
            !this.isDelayProcessing &&
            (this.isDurationProcessing || this.busyQueue.length > 0);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    startLoading(options) {
        if (!this.isBusiesProcessing && this.busyList.length > 0) {
            this.isBusiesProcessing = true;
            this.isDelayProcessing = true;
            this.updateActiveStatus();
            timer(options.delay).subscribe(() => {
                this.isDelayProcessing = false;
                this.isDurationProcessing = true;
                this.updateActiveStatus();
                timer(options.minDuration).subscribe(() => {
                    this.isDurationProcessing = false;
                    this.updateActiveStatus();
                });
            });
        }
    }
    /**
     * @param {?} busies
     * @return {?}
     */
    loadBusyQueue(busies) {
        busies.filter((busy) => {
            return busy && !busy.hasOwnProperty('__loaded_mark_by_ng_busy');
        }).forEach((busy) => {
            Object.defineProperty(busy, '__loaded_mark_by_ng_busy', {
                value: true, configurable: false, enumerable: false, writable: false
            });
            /** @type {?} */
            let cur_busy;
            if (isPromise(busy)) {
                cur_busy = from(busy).subscribe();
            }
            else {
                cur_busy = busy;
            }
            this.appendToQueue(cur_busy);
        });
    }
    /**
     * @param {?} busy
     * @return {?}
     */
    appendToQueue(busy) {
        this.busyQueue.push(busy);
        busy.add(() => {
            this.busyQueue = this.busyQueue.filter((cur) => !cur.closed);
            this.updateActiveStatus();
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
BusyTrackerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
BusyTrackerService.ctorParameters = () => [];
/** @nocollapse */ BusyTrackerService.ngInjectableDef = defineInjectable({ factory: function BusyTrackerService_Factory() { return new BusyTrackerService(); }, token: BusyTrackerService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class BusyConfigHolderService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = Object.assign({}, BUSY_CONFIG_DEFAULTS, config || new BusyConfig());
    }
}
BusyConfigHolderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
BusyConfigHolderService.ctorParameters = () => [
    { type: BusyConfig, decorators: [{ type: Optional }] }
];
/** @nocollapse */ BusyConfigHolderService.ngInjectableDef = defineInjectable({ factory: function BusyConfigHolderService_Factory() { return new BusyConfigHolderService(inject(BusyConfig, 8)); }, token: BusyConfigHolderService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const inactiveStyle = style({
    opacity: 0,
    transform: 'translateY(-40px)'
});
/** @type {?} */
const timing = '.3s ease';
class NgBusyComponent {
    /**
     * @param {?} instanceConfigHolder
     * @param {?} busyEmitter
     * @param {?} cdr
     */
    constructor(instanceConfigHolder, busyEmitter, cdr) {
        this.instanceConfigHolder = instanceConfigHolder;
        this.busyEmitter = busyEmitter;
        this.cdr = cdr;
        this.disableAnimation = false;
        this.showBackdrop = true;
        this.isActive = false;
        this.busyMonitor = this.busyEmitter.subscribe((isActive) => {
            /** @type {?} */
            const config = this.instanceConfigHolder.config;
            this.isActive = isActive;
            this.wrapperClass = config.wrapperClass;
            this.showBackdrop = config.backdrop;
            this.disableAnimation = config.disableAnimation;
            if (this.cdr) {
                this.cdr.markForCheck();
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.busyMonitor) {
            this.busyMonitor.unsubscribe();
        }
    }
}
NgBusyComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ng-busy',
                template: `<div [class]="wrapperClass" @flyInOut [@.disabled]="disableAnimation" *ngIf="isActive">
  <ng-content></ng-content>
</div>
<div class="ng-busy-backdrop" @flyInOut [@.disabled]="disableAnimation" *ngIf="showBackdrop && isActive">
</div>
`,
                styles: [``],
                animations: [
                    trigger('flyInOut', [
                        transition('void => *', [
                            inactiveStyle,
                            animate(timing)
                        ]),
                        transition('* => void', [
                            animate(timing, inactiveStyle)
                        ])
                    ])
                ]
            },] },
];
/** @nocollapse */
NgBusyComponent.ctorParameters = () => [
    { type: InstanceConfigHolderService, decorators: [{ type: Inject, args: ['instanceConfigHolder',] }] },
    { type: EventEmitter, decorators: [{ type: Inject, args: ['busyEmitter',] }] },
    { type: ChangeDetectorRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgBusyDirective {
    /**
     * @param {?} configHolder
     * @param {?} instanceConfigHolder
     * @param {?} resolver
     * @param {?} tracker
     * @param {?} appRef
     * @param {?} vcr
     * @param {?} element
     * @param {?} renderer
     * @param {?} injector
     */
    constructor(configHolder, instanceConfigHolder, resolver, tracker, appRef, vcr, element, renderer, injector) {
        this.configHolder = configHolder;
        this.instanceConfigHolder = instanceConfigHolder;
        this.resolver = resolver;
        this.tracker = tracker;
        this.appRef = appRef;
        this.vcr = vcr;
        this.element = element;
        this.renderer = renderer;
        this.injector = injector;
        this.busyStart = new EventEmitter();
        this.busyStop = new EventEmitter();
        this.isLoading = false;
        this.busyEmitter = new EventEmitter();
        this.onStartSubscription = tracker.onStartBusy.subscribe(() => {
            setTimeout(() => {
                this.recreateBusyIfNecessary();
                this.isLoading = true;
                this.busyEmitter.emit(this.isLoading);
                this.busyStart.emit();
            }, 0);
        });
        this.onStopSubscription = tracker.onStopBusy.subscribe(() => {
            this.isLoading = false;
            this.busyEmitter.emit(this.isLoading);
            this.busyStop.emit();
        });
    }
    /**
     * @param {?} op
     * @return {?}
     */
    set options(op) {
        this._option = op;
    }
    /**
     * @return {?}
     */
    get options() {
        return this._option;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.optionsNorm = this.normalizeOptions(this.options);
        this.instanceConfigHolder.config = this.optionsNorm;
        this.tracker.load({
            busyList: this.optionsNorm.busy,
            delay: this.optionsNorm.delay,
            minDuration: this.optionsNorm.minDuration
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyComponents();
        this.onStartSubscription.unsubscribe();
        this.onStopSubscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    recreateBusyIfNecessary() {
        if (!this.busyRef
            || this.template !== this.optionsNorm.template
            || this.templateNgStyle !== this.optionsNorm.templateNgStyle) {
            this.destroyComponents();
            this.template = this.optionsNorm.template;
            this.templateNgStyle = this.optionsNorm.templateNgStyle;
            this.createBusy();
            this.busyEmitter.emit(this.isLoading);
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    normalizeOptions(options) {
        if (!options) {
            options = { busy: [] };
        }
        else if (Array.isArray(options)
            || isPromise(options)
            || options instanceof Subscription) {
            options = { busy: options };
        }
        options = Object.assign({}, this.configHolder.config, options);
        if (!Array.isArray(options.busy)) {
            options.busy = [options.busy];
        }
        return options;
    }
    /**
     * @return {?}
     */
    destroyComponents() {
        if (this.busyRef) {
            this.busyRef.destroy();
        }
        if (this.componentViewRef) {
            this.appRef.detachView(this.componentViewRef);
        }
    }
    /**
     * @return {?}
     */
    createBusy() {
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(NgBusyComponent);
        /** @type {?} */
        const injector = Injector.create({
            providers: [
                {
                    provide: 'instanceConfigHolder',
                    useValue: this.instanceConfigHolder
                },
                {
                    provide: 'busyEmitter',
                    useValue: this.busyEmitter
                }
            ], parent: this.injector
        });
        this.template = this.optionsNorm.template;
        this.busyRef = this.vcr.createComponent(factory, 0, injector, this.generateNgContent(injector));
    }
    /**
     * @param {?} injector
     * @return {?}
     */
    generateNgContent(injector) {
        if (typeof this.template === 'string') {
            /** @type {?} */
            const element = this.renderer.createText(this.template);
            return [[element]];
        }
        if (this.template instanceof TemplateRef) {
            /** @type {?} */
            const context = {};
            /** @type {?} */
            const viewRef = this.template.createEmbeddedView(context);
            return [viewRef.rootNodes];
        }
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(this.template);
        /** @type {?} */
        const componentRef = factory.create(injector);
        componentRef.instance.templateNgStyle = this.options.templateNgStyle;
        this.componentViewRef = componentRef.hostView;
        this.appRef.attachView(this.componentViewRef);
        return [[componentRef.location.nativeElement]];
    }
}
NgBusyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngBusy]',
                providers: [BusyTrackerService, InstanceConfigHolderService]
            },] },
];
/** @nocollapse */
NgBusyDirective.ctorParameters = () => [
    { type: BusyConfigHolderService },
    { type: InstanceConfigHolderService },
    { type: ComponentFactoryResolver },
    { type: BusyTrackerService },
    { type: ApplicationRef },
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
NgBusyDirective.propDecorators = {
    options: [{ type: Input, args: ['ngBusy',] }],
    busyStart: [{ type: Output }],
    busyStop: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgBusyModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: NgBusyModule,
            providers: [
                { provide: BusyConfig, useValue: config }
            ]
        };
    }
}
NgBusyModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [DefaultBusyComponent, NgBusyDirective, NgBusyComponent],
                providers: [BusyConfigHolderService, BusyTrackerService],
                exports: [NgBusyDirective],
                entryComponents: [DefaultBusyComponent, NgBusyComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgBusyDirective, InstanceConfigHolderService, NgBusyModule, BusyConfig, DefaultBusyComponent, BUSY_CONFIG_DEFAULTS, NgBusyComponent as ɵc, BusyConfigHolderService as ɵb, BusyTrackerService as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,